{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nvar VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\nexport var shouldPreventRemove = function shouldPreventRemove(emitter, beforeRemoveListeners, currentRoutes, nextRoutes, action) {\n  var _action$VISITED_ROUTE;\n\n  var nextRouteKeys = nextRoutes.map(function (route) {\n    return route.key;\n  });\n  var removedRoutes = currentRoutes.filter(function (route) {\n    return !nextRouteKeys.includes(route.key);\n  }).reverse();\n  var visitedRouteKeys = (_action$VISITED_ROUTE = action[VISITED_ROUTE_KEYS]) !== null && _action$VISITED_ROUTE !== void 0 ? _action$VISITED_ROUTE : new Set();\n\n  var beforeRemoveAction = _objectSpread(_objectSpread({}, action), {}, _defineProperty({}, VISITED_ROUTE_KEYS, visitedRouteKeys));\n\n  for (var _iterator = removedRoutes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var _route = _ref;\n\n    var _beforeRemoveListener;\n\n    if (visitedRouteKeys.has(_route.key)) {\n      continue;\n    }\n\n    var _isPrevented = (_beforeRemoveListener = beforeRemoveListeners[_route.key]) === null || _beforeRemoveListener === void 0 ? void 0 : _beforeRemoveListener.call(beforeRemoveListeners, beforeRemoveAction);\n\n    if (_isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(_route.key);\n\n    var _event = emitter.emit({\n      type: 'beforeRemove',\n      target: _route.key,\n      data: {\n        action: beforeRemoveAction\n      },\n      canPreventDefault: true\n    });\n\n    if (_event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\nexport default function useOnPreventRemove(_ref2) {\n  var getState = _ref2.getState,\n      emitter = _ref2.emitter,\n      beforeRemoveListeners = _ref2.beforeRemoveListeners;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      addKeyedListener = _React$useContext.addKeyedListener;\n\n  var route = React.useContext(NavigationRouteContext);\n  var routeKey = route === null || route === void 0 ? void 0 : route.key;\n  React.useEffect(function () {\n    if (routeKey) {\n      return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('beforeRemove', routeKey, function (action) {\n        var state = getState();\n        return shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, [], action);\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}","map":{"version":3,"sources":["useOnPreventRemove.tsx"],"names":["VISITED_ROUTE_KEYS","Symbol","shouldPreventRemove","nextRouteKeys","nextRoutes","route","removedRoutes","currentRoutes","visitedRouteKeys","action","beforeRemoveAction","isPrevented","beforeRemoveListeners","event","type","target","data","canPreventDefault","addKeyedListener","React","routeKey","state","getState"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationState,\n  NavigationAction,\n} from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport type { EventMapCore } from './types';\n\ntype Options = {\n  getState: () => NavigationState;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n};\n\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\n\nexport const shouldPreventRemove = (\n  emitter: NavigationEventEmitter<EventMapCore<any>>,\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>,\n  currentRoutes: { key: string }[],\n  nextRoutes: { key?: string | undefined }[],\n  action: NavigationAction\n) => {\n  const nextRouteKeys = nextRoutes.map((route) => route.key);\n\n  // Call these in reverse order so last screens handle the event first\n  const removedRoutes = currentRoutes\n    .filter((route) => !nextRouteKeys.includes(route.key))\n    .reverse();\n\n  const visitedRouteKeys: Set<string> =\n    // @ts-expect-error: add this property to mark that we've already emitted this action\n    action[VISITED_ROUTE_KEYS] ?? new Set<string>();\n\n  const beforeRemoveAction = {\n    ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys,\n  };\n\n  for (const route of removedRoutes) {\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    }\n\n    // First, we need to check if any child screens want to prevent it\n    const isPrevented = beforeRemoveListeners[route.key]?.(beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: { action: beforeRemoveAction },\n      canPreventDefault: true,\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default function useOnPreventRemove({\n  getState,\n  emitter,\n  beforeRemoveListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route?.key;\n\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener?.('beforeRemove', routeKey, (action) => {\n        const state = getState();\n\n        return shouldPreventRemove(\n          emitter,\n          beforeRemoveListeners,\n          state.routes,\n          [],\n          action\n        );\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}\n"]},"metadata":{},"sourceType":"module"}