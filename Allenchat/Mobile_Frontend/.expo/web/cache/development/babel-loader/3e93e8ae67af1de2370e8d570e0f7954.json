{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/media/allen/SIMBAD/Flaskprojects/CodeReservoir/codereservoir/node_modules/react-navigation-header-buttons/src/HeaderButton.js\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableItem from \"./TouchableItem\";\nimport { useTheme } from '@react-navigation/native';\nvar BUTTON_HIT_SLOP = Object.freeze({\n  top: 5,\n  bottom: 5,\n  left: 5,\n  right: 5\n});\nexport function HeaderButton(props) {\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors,\n      dark = _useTheme.dark;\n\n  var themeColor = Platform.select({\n    ios: colors.primary,\n    default: colors.text\n  });\n  var themePressColorAndroid = dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)';\n\n  var onPress = props.onPress,\n      style = props.style,\n      renderButtonElement = props.renderButtonElement,\n      background = props.background,\n      iconName = props.iconName,\n      title = props.title,\n      buttonStyle = props.buttonStyle,\n      IconComponent = props.IconComponent,\n      iconSize = props.iconSize,\n      color = props.color,\n      pressColor = props.pressColor,\n      other = _objectWithoutProperties(props, [\"onPress\", \"style\", \"renderButtonElement\", \"background\", \"iconName\", \"title\", \"buttonStyle\", \"IconComponent\", \"iconSize\", \"color\", \"pressColor\"]);\n\n  var usedColor = color || themeColor;\n  var usedPressColor = pressColor || themePressColorAndroid;\n  var ButtonElement = renderButtonElement({\n    iconName: iconName,\n    title: title,\n    buttonStyle: buttonStyle,\n    IconComponent: IconComponent,\n    iconSize: iconSize,\n    color: usedColor\n  });\n  return React.createElement(TouchableItem, _extends({\n    borderless: true,\n    onPress: onPress,\n    hitSlop: BUTTON_HIT_SLOP,\n    rippleRadius: 20,\n    style: StyleSheet.compose(styles.buttonContainer, style),\n    pressColor: usedPressColor\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, ButtonElement));\n}\nvar styles = StyleSheet.create({\n  buttonContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/media/allen/SIMBAD/Flaskprojects/CodeReservoir/codereservoir/node_modules/react-navigation-header-buttons/src/HeaderButton.js"],"names":["React","TouchableItem","useTheme","BUTTON_HIT_SLOP","Object","freeze","top","bottom","left","right","HeaderButton","props","colors","dark","themeColor","Platform","select","ios","primary","default","text","themePressColorAndroid","onPress","style","renderButtonElement","background","iconName","title","buttonStyle","IconComponent","iconSize","color","pressColor","other","usedColor","usedPressColor","ButtonElement","StyleSheet","compose","styles","buttonContainer","create","alignItems","justifyContent"],"mappings":";;;AAGA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAEA,OAAOC,aAAP;AAEA,SAASC,QAAT,QAAyB,0BAAzB;AAEA,IAAMC,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,EAAAA,GAAG,EAAE,CAAP;AAAUC,EAAAA,MAAM,EAAE,CAAlB;AAAqBC,EAAAA,IAAI,EAAE,CAA3B;AAA8BC,EAAAA,KAAK,EAAE;AAArC,CAAd,CAAxB;AA8BA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA4D;AAAA,kBACxCT,QAAQ,EADgC;AAAA,MACzDU,MADyD,aACzDA,MADyD;AAAA,MACjDC,IADiD,aACjDA,IADiD;;AAEjE,MAAMC,UAAU,GAAGC,QAAQ,CAACC,MAAT,CAAgB;AACjCC,IAAAA,GAAG,EAAEL,MAAM,CAACM,OADqB;AAEjCC,IAAAA,OAAO,EAAEP,MAAM,CAACQ;AAFiB,GAAhB,CAAnB;AAIA,MAAMC,sBAAsB,GAAGR,IAAI,GAAG,0BAAH,GAAgC,oBAAnE;;AANiE,MAS/DS,OAT+D,GAqB7DX,KArB6D,CAS/DW,OAT+D;AAAA,MAU/DC,KAV+D,GAqB7DZ,KArB6D,CAU/DY,KAV+D;AAAA,MAW/DC,mBAX+D,GAqB7Db,KArB6D,CAW/Da,mBAX+D;AAAA,MAY/DC,UAZ+D,GAqB7Dd,KArB6D,CAY/Dc,UAZ+D;AAAA,MAa/DC,QAb+D,GAqB7Df,KArB6D,CAa/De,QAb+D;AAAA,MAc/DC,KAd+D,GAqB7DhB,KArB6D,CAc/DgB,KAd+D;AAAA,MAe/DC,WAf+D,GAqB7DjB,KArB6D,CAe/DiB,WAf+D;AAAA,MAgB/DC,aAhB+D,GAqB7DlB,KArB6D,CAgB/DkB,aAhB+D;AAAA,MAiB/DC,QAjB+D,GAqB7DnB,KArB6D,CAiB/DmB,QAjB+D;AAAA,MAkB/DC,KAlB+D,GAqB7DpB,KArB6D,CAkB/DoB,KAlB+D;AAAA,MAmB/DC,UAnB+D,GAqB7DrB,KArB6D,CAmB/DqB,UAnB+D;AAAA,MAoB5DC,KApB4D,4BAqB7DtB,KArB6D;;AAuBjE,MAAMuB,SAAS,GAAGH,KAAK,IAAIjB,UAA3B;AACA,MAAMqB,cAAc,GAAGH,UAAU,IAAIX,sBAArC;AAEA,MAAMe,aAAa,GAAGZ,mBAAmB,CAAC;AACxCE,IAAAA,QAAQ,EAARA,QADwC;AAExCC,IAAAA,KAAK,EAALA,KAFwC;AAGxCC,IAAAA,WAAW,EAAXA,WAHwC;AAIxCC,IAAAA,aAAa,EAAbA,aAJwC;AAKxCC,IAAAA,QAAQ,EAARA,QALwC;AAMxCC,IAAAA,KAAK,EAAEG;AANiC,GAAD,CAAzC;AAQA,SACE,oBAAC,aAAD;AACE,IAAA,UAAU,MADZ;AAEE,IAAA,OAAO,EAAEZ,OAFX;AAGE,IAAA,OAAO,EAAEnB,eAHX;AAIE,IAAA,YAAY,EAAE,EAJhB;AAKE,IAAA,KAAK,EAAEkC,UAAU,CAACC,OAAX,CAAmBC,MAAM,CAACC,eAA1B,EAA2CjB,KAA3C,CALT;AAME,IAAA,UAAU,EAAEY;AANd,KAOMF,KAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOG,aAAP,CATF,CADF;AAaD;AAED,IAAMG,MAAM,GAAGF,UAAU,CAACI,MAAX,CAAkB;AAC/BD,EAAAA,eAAe,EAAE;AACfE,IAAAA,UAAU,EAAE,QADG;AAEfC,IAAAA,cAAc,EAAE;AAFD;AADc,CAAlB,CAAf","sourcesContent":["/**\n * @flow\n */\nimport * as React from 'react';\nimport { StyleSheet, View, TouchableWithoutFeedback, Platform } from 'react-native';\nimport TouchableItem from './TouchableItem';\nimport type { ViewStyleProp } from 'react-native/Libraries/StyleSheet/StyleSheet';\nimport { useTheme } from '@react-navigation/native';\n\nconst BUTTON_HIT_SLOP = Object.freeze({ top: 5, bottom: 5, left: 5, right: 5 });\n\n// for renderVisibleButton() function\nexport type VisibleButtonProps = {\n  IconComponent?: React.ComponentType<any>,\n  iconSize?: number,\n  color?: string,\n  iconName?: string,\n  title: string,\n  buttonStyle?: ViewStyleProp,\n};\n\n// from <Item />\nexport type ItemProps = {\n  ...$Exact<React.ElementConfig<typeof TouchableWithoutFeedback>>,\n  ...VisibleButtonProps,\n  onPress: ?() => any,\n  style?: ViewStyleProp,\n};\n\ntype OtherProps = {\n  background?: any,\n  foreground?: any,\n  pressColor?: any,\n  renderButtonElement: (VisibleButtonProps) => React.Element<any>,\n  ...\n};\n\nexport type HeaderButtonProps = ItemProps & OtherProps;\n\nexport function HeaderButton(props: HeaderButtonProps): React.Node {\n  const { colors, dark } = useTheme();\n  const themeColor = Platform.select({\n    ios: colors.primary,\n    default: colors.text,\n  });\n  const themePressColorAndroid = dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)';\n\n  const {\n    onPress,\n    style,\n    renderButtonElement,\n    background,\n    iconName,\n    title,\n    buttonStyle,\n    IconComponent,\n    iconSize,\n    color,\n    pressColor,\n    ...other\n  } = props;\n\n  const usedColor = color || themeColor;\n  const usedPressColor = pressColor || themePressColorAndroid;\n\n  const ButtonElement = renderButtonElement({\n    iconName,\n    title,\n    buttonStyle,\n    IconComponent,\n    iconSize,\n    color: usedColor,\n  });\n  return (\n    <TouchableItem\n      borderless\n      onPress={onPress}\n      hitSlop={BUTTON_HIT_SLOP}\n      rippleRadius={20}\n      style={StyleSheet.compose(styles.buttonContainer, style)}\n      pressColor={usedPressColor}\n      {...other}\n    >\n      <View>{ButtonElement}</View>\n    </TouchableItem>\n  );\n}\n\nconst styles = StyleSheet.create({\n  buttonContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}