{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExpoNetwork from \"./ExpoNetwork\";\nimport { NetworkStateType } from \"./Network.types\";\nexport { NetworkStateType };\nexport function getNetworkStateAsync() {\n  return _regeneratorRuntime.async(function getNetworkStateAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoNetwork.getNetworkStateAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-network', 'getNetworkStateAsync');\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(ExpoNetwork.getNetworkStateAsync());\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getIpAddressAsync() {\n  return _regeneratorRuntime.async(function getIpAddressAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoNetwork.getIpAddressAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-network', 'getIpAddressAsync');\n\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(ExpoNetwork.getIpAddressAsync());\n\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getMacAddressAsync() {\n  var interfaceName,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function getMacAddressAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          interfaceName = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : null;\n          console.warn('Network.getMacAddressAsync has been deprecated and will be removed in a future SDK version. To uniquely identify a device, use the expo-application module instead.');\n          return _context3.abrupt(\"return\", '02:00:00:00:00:00');\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isAirplaneModeEnabledAsync() {\n  return _regeneratorRuntime.async(function isAirplaneModeEnabledAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExpoNetwork.isAirplaneModeEnabledAsync) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-network', 'isAirplaneModeEnabledAsync');\n\n        case 2:\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(ExpoNetwork.isAirplaneModeEnabledAsync());\n\n        case 4:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Network.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAT,QAAoC,kBAApC;AAEA,OAAO,WAAP;AACA,SAAuB,gBAAvB;AAEA,SAAuB,gBAAvB;AAEA,OAAO,SAAe,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,WAAW,CAAC,oBADZ;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,cAAxB,EAAwC,sBAAxC,CAFH;;AAAA;AAAA;AAAA,2CAIQ,WAAW,CAAC,oBAAZ,EAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,OAAO,SAAe,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,WAAW,CAAC,iBADZ;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,cAAxB,EAAwC,mBAAxC,CAFH;;AAAA;AAAA;AAAA,2CAIQ,WAAW,CAAC,iBAAZ,EAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWP,OAAO,SAAe,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC,UAAA,aAAlC,8DAAiE,IAAjE;AACL,UAAA,OAAO,CAAC,IAAR,CACE,qKADF;AADK,4CAIE,mBAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,OAAO,SAAe,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,WAAW,CAAC,0BADZ;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,cAAxB,EAAwC,4BAAxC,CAFH;;AAAA;AAAA;AAAA,2CAIQ,WAAW,CAAC,0BAAZ,EAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoNetwork from './ExpoNetwork';\nimport { NetworkState, NetworkStateType } from './Network.types';\n\nexport { NetworkState, NetworkStateType };\n\nexport async function getNetworkStateAsync(): Promise<NetworkState> {\n  if (!ExpoNetwork.getNetworkStateAsync) {\n    throw new UnavailabilityError('expo-network', 'getNetworkStateAsync');\n  }\n  return await ExpoNetwork.getNetworkStateAsync();\n}\n\nexport async function getIpAddressAsync(): Promise<string> {\n  if (!ExpoNetwork.getIpAddressAsync) {\n    throw new UnavailabilityError('expo-network', 'getIpAddressAsync');\n  }\n  return await ExpoNetwork.getIpAddressAsync();\n}\n\n/**\n * @deprecated getMacAddressAsync has been deprecated and will be removed in a future SDK version.\n * It always returns '02:00:00:00:00:00'.\n */\nexport async function getMacAddressAsync(interfaceName: string | null = null): Promise<string> {\n  console.warn(\n    'Network.getMacAddressAsync has been deprecated and will be removed in a future SDK version. To uniquely identify a device, use the expo-application module instead.'\n  );\n  return '02:00:00:00:00:00';\n}\n\nexport async function isAirplaneModeEnabledAsync(): Promise<boolean> {\n  if (!ExpoNetwork.isAirplaneModeEnabledAsync) {\n    throw new UnavailabilityError('expo-network', 'isAirplaneModeEnabledAsync');\n  }\n  return await ExpoNetwork.isAirplaneModeEnabledAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}