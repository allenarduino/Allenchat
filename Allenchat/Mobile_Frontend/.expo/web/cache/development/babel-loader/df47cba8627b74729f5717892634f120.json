{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/media/allen/SIMBAD/Flaskprojects/CodeReservoir/codereservoir/Screens/People.js\";\n\nfunction _createSuper(Derived) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nimport React from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from '@react-native-community/async-storage';\nimport BottomTab from \"../Navigation/BottomNav\";\nimport * as Network from 'expo-network';\n\nvar People = function (_React$Component) {\n  _inherits(People, _React$Component);\n\n  var _super = _createSuper(People);\n\n  function People() {\n    var _this;\n\n    _classCallCheck(this, People);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.fetch_Ip = function _callee() {\n      var ip;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Network.getIpAddressAsync());\n\n            case 2:\n              ip = _context.sent;\n              alert(ip);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(People, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: {\n          marginTop: 200,\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 10\n        }\n      }, \"People\"), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this2.fetch_Ip();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 10\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 14\n        }\n      }, \"Get Ip\")));\n    }\n  }]);\n\n  return People;\n}(React.Component);\n\nexport default People;","map":{"version":3,"sources":["/media/allen/SIMBAD/Flaskprojects/CodeReservoir/codereservoir/Screens/People.js"],"names":["React","AsyncStorage","BottomTab","Network","People","fetch_Ip","getIpAddressAsync","ip","alert","marginTop","alignItems","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AASA,OAAOC,YAAP,MAAyB,uCAAzB;AAEA,OAAOC,SAAP;AACA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;;IACMC,M;;;;;;;;;;;;;;;;UAENC,Q,GAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACQF,OAAO,CAACG,iBAAR,EADR;;AAAA;AACDC,cAAAA,EADC;AAENC,cAAAA,KAAK,CAACD,EAAD,CAAL;;AAFM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;6BAMD;AAAA;;AACJ,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACE,UAAAA,SAAS,EAAC,GAAX;AAAeC,UAAAA,UAAU,EAAC;AAA1B,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,EAEC,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE;AAAA,iBAAI,MAAI,CAACL,QAAL,EAAJ;AAAA,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CAFD,CADJ;AAQH;;;;EAjBoBL,KAAK,CAACW,S;;AAoB3B,eAAeP,MAAf","sourcesContent":["import React from 'react';\nimport {\nTouchableOpacity,\nText,\nView,\n\n\n} from 'react-native';\n\nimport AsyncStorage from '@react-native-community/async-storage';\n\nimport BottomTab from '../Navigation/BottomNav';\nimport * as Network from 'expo-network';\nclass People extends React.Component{\n\nfetch_Ip=async()=>{\n  const ip=await Network.getIpAddressAsync();\n   alert(ip);\n}\n\n    \nrender(){\n    return(\n        <View style={{marginTop:200,alignItems:\"center\"}}>\n         <Text>People</Text>\n         <TouchableOpacity onPress={()=>this.fetch_Ip()}>\n             <Text>Get Ip</Text>\n         </TouchableOpacity>\n        </View>\n    )\n}\n}\n\nexport default People"]},"metadata":{},"sourceType":"module"}