{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from '@unimodules/core';\nvar GOOGLE_API_URL = 'https://maps.googleapis.com/maps/api/geocode/json';\nvar googleApiKey;\nexport function setGoogleApiKey(apiKey) {\n  googleApiKey = apiKey;\n}\nexport function googleGeocodeAsync(address) {\n  var result;\n  return _regeneratorRuntime.async(function googleGeocodeAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          assertGoogleApiKey();\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(requestGoogleApiAsync({\n            address: address\n          }));\n\n        case 3:\n          result = _context.sent;\n\n          if (!(result.status === 'ZERO_RESULTS')) {\n            _context.next = 6;\n            break;\n          }\n\n          return _context.abrupt(\"return\", []);\n\n        case 6:\n          assertGeocodeResults(result);\n          return _context.abrupt(\"return\", result.results.map(geocodingResultToLocation));\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function googleReverseGeocodeAsync(options) {\n  var result;\n  return _regeneratorRuntime.async(function googleReverseGeocodeAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          assertGoogleApiKey();\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(requestGoogleApiAsync({\n            latlng: options.latitude + \",\" + options.longitude\n          }));\n\n        case 3:\n          result = _context2.sent;\n\n          if (!(result.status === 'ZERO_RESULTS')) {\n            _context2.next = 6;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", []);\n\n        case 6:\n          assertGeocodeResults(result);\n          return _context2.abrupt(\"return\", result.results.map(reverseGeocodingResultToAddress));\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction assertGeocodeResults(resultObject) {\n  var status = resultObject.status,\n      error_message = resultObject.error_message;\n\n  if (status !== 'ZERO_RESULTS' && status !== 'OK') {\n    if (error_message) {\n      throw new CodedError(status, error_message);\n    } else if (status === 'UNKNOWN_ERROR') {\n      throw new CodedError(status, 'the request could not be processed due to a server error. The request may succeed if you try again.');\n    }\n\n    throw new CodedError(status, \"An error occurred during geocoding.\");\n  }\n}\n\nfunction assertGoogleApiKey() {\n  if (!googleApiKey) {\n    throw new Error('Google API key is required to use geocoding. Please set it using `setGoogleApiKey` method.');\n  }\n}\n\nfunction requestGoogleApiAsync(params) {\n  var query, result;\n  return _regeneratorRuntime.async(function requestGoogleApiAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          query = Object.entries(params).map(function (entry) {\n            return entry[0] + \"=\" + encodeURI(entry[1]);\n          }).join('&');\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(fetch(GOOGLE_API_URL + \"?key=\" + googleApiKey + \"&\" + query));\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(result.json());\n\n        case 6:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction geocodingResultToLocation(result) {\n  var location = result.geometry.location;\n  return {\n    latitude: location.lat,\n    longitude: location.lng\n  };\n}\n\nfunction reverseGeocodingResultToAddress(result) {\n  var address = {};\n\n  for (var _iterator = result.address_components, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref2;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref2 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref2 = _i.value;\n    }\n\n    var _ref3 = _ref2;\n    var _long_name = _ref3.long_name;\n    var _short_name = _ref3.short_name;\n    var _types = _ref3.types;\n\n    if (_types.includes('locality')) {\n      address.city = _long_name;\n      continue;\n    }\n\n    if (_types.includes('sublocality')) {\n      address.district = _long_name;\n      continue;\n    }\n\n    if (_types.includes('street_address') || _types.includes('route')) {\n      address.street = _long_name;\n      continue;\n    }\n\n    if (_types.includes('administrative_area_level_1')) {\n      address.region = _long_name;\n      continue;\n    }\n\n    if (_types.includes('administrative_area_level_2')) {\n      address.subregion = _long_name;\n      continue;\n    }\n\n    if (_types.includes('country')) {\n      address.country = _long_name;\n      address.isoCountryCode = _short_name;\n      continue;\n    }\n\n    if (_types.includes('postal_code')) {\n      address.postalCode = _long_name;\n      continue;\n    }\n\n    if (_types.includes('point_of_interest')) {\n      address.name = _long_name;\n      continue;\n    }\n  }\n\n  if (!address.name) {\n    address.name = result.formatted_address.replace(/,.*$/, '');\n  }\n\n  return address;\n}","map":{"version":3,"sources":["../src/LocationGoogleGeocoding.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError } from '@unimodules/core';\n\nimport { LocationGeocodedAddress, LocationGeocodedLocation } from './Location.types';\n\nconst GOOGLE_API_URL = 'https://maps.googleapis.com/maps/api/geocode/json';\nlet googleApiKey;\n\ntype GoogleApiGeocodingAddressComponent = {\n  long_name: string;\n  short_name: string;\n  types: string[];\n};\n\ntype GoogleApiGeocodingResult = {\n  address_components: GoogleApiGeocodingAddressComponent[];\n  formatted_address: string;\n  geometry: {\n    location: {\n      lat: number;\n      lng: number;\n    };\n  };\n};\n\ntype GoogleApiGeocodingResponse = {\n  results: GoogleApiGeocodingResult[];\n  status: string;\n};\n\nexport function setGoogleApiKey(apiKey: string) {\n  googleApiKey = apiKey;\n}\n\nexport async function googleGeocodeAsync(address: string): Promise<LocationGeocodedLocation[]> {\n  assertGoogleApiKey();\n\n  const result = await requestGoogleApiAsync({ address });\n\n  if (result.status === 'ZERO_RESULTS') {\n    return [];\n  }\n  assertGeocodeResults(result);\n  return result.results.map(geocodingResultToLocation);\n}\n\nexport async function googleReverseGeocodeAsync(options: {\n  latitude: number;\n  longitude: number;\n}): Promise<LocationGeocodedAddress[]> {\n  assertGoogleApiKey();\n\n  const result = await requestGoogleApiAsync({\n    latlng: `${options.latitude},${options.longitude}`,\n  });\n\n  if (result.status === 'ZERO_RESULTS') {\n    return [];\n  }\n  assertGeocodeResults(result);\n  return result.results.map(reverseGeocodingResultToAddress);\n}\n\n// https://developers.google.com/maps/documentation/geocoding/intro\nfunction assertGeocodeResults(resultObject: any): void {\n  const { status, error_message } = resultObject;\n  if (status !== 'ZERO_RESULTS' && status !== 'OK') {\n    if (error_message) {\n      throw new CodedError(status, error_message);\n    } else if (status === 'UNKNOWN_ERROR') {\n      throw new CodedError(\n        status,\n        'the request could not be processed due to a server error. The request may succeed if you try again.'\n      );\n    }\n    throw new CodedError(status, `An error occurred during geocoding.`);\n  }\n}\n\n/**\n * Makes sure the Google API key is set.\n */\nfunction assertGoogleApiKey() {\n  if (!googleApiKey) {\n    throw new Error(\n      'Google API key is required to use geocoding. Please set it using `setGoogleApiKey` method.'\n    );\n  }\n}\n\n/**\n * Generic and handy method for sending requests to Google Maps API endpoint.\n */\nasync function requestGoogleApiAsync(\n  params: { address: string } | { latlng: string }\n): Promise<GoogleApiGeocodingResponse> {\n  const query = Object.entries(params)\n    .map(entry => `${entry[0]}=${encodeURI(entry[1])}`)\n    .join('&');\n  const result = await fetch(`${GOOGLE_API_URL}?key=${googleApiKey}&${query}`);\n  return await result.json();\n}\n\n/**\n * Converts Google's result to the location object.\n */\nfunction geocodingResultToLocation(result: GoogleApiGeocodingResult): LocationGeocodedLocation {\n  const { location } = result.geometry;\n  return {\n    latitude: location.lat,\n    longitude: location.lng,\n  };\n}\n\n/**\n * Converts Google's result to address object.\n */\nfunction reverseGeocodingResultToAddress(\n  result: GoogleApiGeocodingResult\n): LocationGeocodedAddress {\n  const address: Partial<LocationGeocodedAddress> = {};\n\n  for (const { long_name, short_name, types } of result.address_components) {\n    if (types.includes('locality')) {\n      address.city = long_name;\n      continue;\n    }\n    if (types.includes('sublocality')) {\n      address.district = long_name;\n      continue;\n    }\n    if (types.includes('street_address') || types.includes('route')) {\n      address.street = long_name;\n      continue;\n    }\n    if (types.includes('administrative_area_level_1')) {\n      address.region = long_name;\n      continue;\n    }\n    if (types.includes('administrative_area_level_2')) {\n      address.subregion = long_name;\n      continue;\n    }\n    if (types.includes('country')) {\n      address.country = long_name;\n      address.isoCountryCode = short_name;\n      continue;\n    }\n    if (types.includes('postal_code')) {\n      address.postalCode = long_name;\n      continue;\n    }\n    if (types.includes('point_of_interest')) {\n      address.name = long_name;\n      continue;\n    }\n  }\n  if (!address.name) {\n    address.name = result.formatted_address.replace(/,.*$/, '');\n  }\n  return address as LocationGeocodedAddress;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}