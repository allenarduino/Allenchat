{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/media/allen/SIMBAD/Flaskprojects/CodeReservoir/codereservoir/node_modules/react-navigation-header-buttons/src/TouchableItem.js\";\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\nvar CAN_USE_RIPLLE = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\nexport default function TouchableItem(_ref) {\n  var _ref$borderless = _ref.borderless,\n      borderless = _ref$borderless === void 0 ? false : _ref$borderless,\n      _ref$pressColor = _ref.pressColor,\n      pressColor = _ref$pressColor === void 0 ? 'rgba(0, 0, 0, .32)' : _ref$pressColor,\n      rippleRadius = _ref.rippleRadius,\n      style = _ref.style,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"borderless\", \"pressColor\", \"rippleRadius\", \"style\", \"children\"]);\n\n  var background = React.useMemo(function () {\n    return CAN_USE_RIPLLE ? TouchableNativeFeedback.Ripple(pressColor, borderless, rippleRadius) : undefined;\n  }, [pressColor, borderless, rippleRadius]);\n\n  if (CAN_USE_RIPLLE) {\n    return React.createElement(TouchableNativeFeedback, _extends({}, rest, {\n      useForeground: TouchableNativeFeedback.canUseNativeForeground(),\n      background: background,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }), React.createElement(View, {\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, React.Children.only(children)));\n  } else {\n    return React.createElement(TouchableOpacity, _extends({\n      style: style\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }), children);\n  }\n}","map":{"version":3,"sources":["/media/allen/SIMBAD/Flaskprojects/CodeReservoir/codereservoir/node_modules/react-navigation-header-buttons/src/TouchableItem.js"],"names":["React","ANDROID_VERSION_LOLLIPOP","CAN_USE_RIPLLE","Platform","OS","Version","TouchableItem","borderless","pressColor","rippleRadius","style","children","rest","background","useMemo","TouchableNativeFeedback","Ripple","undefined","canUseNativeForeground","Children","only"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAmBA,IAAMC,wBAAwB,GAAG,EAAjC;AACA,IAAMC,cAAc,GAAGC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6BD,QAAQ,CAACE,OAAT,IAAoBJ,wBAAxE;AAEA,eAAe,SAASK,aAAT,OAOL;AAAA,6BANRC,UAMQ;AAAA,MANRA,UAMQ,gCANK,KAML;AAAA,6BALRC,UAKQ;AAAA,MALRA,UAKQ,gCALK,oBAKL;AAAA,MAJRC,YAIQ,QAJRA,YAIQ;AAAA,MAHRC,KAGQ,QAHRA,KAGQ;AAAA,MAFRC,QAEQ,QAFRA,QAEQ;AAAA,MADLC,IACK;;AACR,MAAMC,UAAU,GAAGb,KAAK,CAACc,OAAN,CAAc,YAAM;AACrC,WAAOZ,cAAc,GACjBa,uBAAuB,CAACC,MAAxB,CAA+BR,UAA/B,EAA2CD,UAA3C,EAAuDE,YAAvD,CADiB,GAEjBQ,SAFJ;AAGD,GAJkB,EAIhB,CAACT,UAAD,EAAaD,UAAb,EAAyBE,YAAzB,CAJgB,CAAnB;;AAaA,MAAIP,cAAJ,EAAoB;AAClB,WACE,oBAAC,uBAAD,eACMU,IADN;AAEE,MAAA,aAAa,EAAEG,uBAAuB,CAACG,sBAAxB,EAFjB;AAGE,MAAA,UAAU,EAAEL,UAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEH,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqBV,KAAK,CAACmB,QAAN,CAAeC,IAAf,CAAoBT,QAApB,CAArB,CALF,CADF;AASD,GAVD,MAUO;AACL,WACE,oBAAC,gBAAD;AAAkB,MAAA,KAAK,EAAED;AAAzB,OAAoCE,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGD,QADH,CADF;AAKD;AACF","sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  type ViewProps,\n} from 'react-native';\n\ntype Props = {\n  ...ViewProps,\n  pressColor?: string,\n  disabled?: boolean,\n  borderless?: boolean,\n  delayPressIn?: number,\n  onPress?: () => void,\n  children: React.Node,\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst CAN_USE_RIPLLE = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\nexport default function TouchableItem({\n  borderless = false,\n  pressColor = 'rgba(0, 0, 0, .32)',\n  rippleRadius,\n  style,\n  children,\n  ...rest\n}: Props) {\n  const background = React.useMemo(() => {\n    return CAN_USE_RIPLLE\n      ? TouchableNativeFeedback.Ripple(pressColor, borderless, rippleRadius)\n      : undefined;\n  }, [pressColor, borderless, rippleRadius]);\n  /*\n   * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n   * therefore only enable it on Android Lollipop and above.\n   *\n   * All touchables on Android should have the ripple effect according to\n   * platform design guidelines.\n   * We need to pass the background prop to specify a borderless ripple effect.\n   */\n  if (CAN_USE_RIPLLE) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        useForeground={TouchableNativeFeedback.canUseNativeForeground()}\n        background={background}\n      >\n        <View style={style}>{React.Children.only(children)}</View>\n      </TouchableNativeFeedback>\n    );\n  } else {\n    return (\n      <TouchableOpacity style={style} {...rest}>\n        {children}\n      </TouchableOpacity>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}